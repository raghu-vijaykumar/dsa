/*
 * This source file was generated by the Gradle 'init' task
 */
package dsajava.linkedlist;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

public class LinkedListTest {

    @Test
    public void testLinkedListInitialization() {
        LinkedList list = new LinkedList(10);
        assertEquals(10, list.head.value);
        assertEquals(10, list.tail.value);
        assertEquals(1, list.length);
    }

    @Test
    public void testAppend() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.append(30);

        assertEquals(3, list.length);
        assertEquals(30, list.tail.value);
        assertEquals(20, list.head.next.value); // Second element check
    }

    @Test
    public void testClear() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.clear();

        assertNull(list.head);
        assertNull(list.tail);
        assertEquals(0, list.length);
    }

    @Test
    public void testRemoveLast() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.append(30);

        LinkedList.Node removedNode = list.removeLast();

        assertEquals(2, list.length);
        assertEquals(30, removedNode.value);
        assertEquals(20, list.tail.value);
        assertNull(list.tail.next);
    }

    @Test
    public void testRemoveLast_SingleElement() {
        LinkedList list = new LinkedList(10);
        LinkedList.Node removedNode = list.removeLast();

        assertEquals(0, list.length);
        assertEquals(10, removedNode.value);
        assertNull(list.head);
        assertNull(list.tail);
    }

    @Test
    public void testRemoveFirst() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.append(30);

        LinkedList.Node removedNode = list.removeFirst();

        assertEquals(2, list.length);
        assertEquals(10, removedNode.value);
        assertEquals(20, list.head.value);
    }

    @Test
    public void testRemoveFirst_SingleElement() {
        LinkedList list = new LinkedList(10);
        LinkedList.Node removedNode = list.removeFirst();

        assertEquals(0, list.length);
        assertEquals(10, removedNode.value);
        assertNull(list.head);
        assertNull(list.tail);
    }

    @Test
    public void testGet() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.append(30);

        LinkedList.Node nodeAtIndex2 = list.get(2);

        assertEquals(20, nodeAtIndex2.value);
    }

    @Test
    public void testGet_OutOfBounds() {
        LinkedList list = new LinkedList(10);
        list.append(20);

        Exception exception = assertThrows(IndexOutOfBoundsException.class, () -> {
            list.get(3);
        });

        assertEquals("3 is out of bounds the size of linkedList is 2", exception.getMessage());
    }

    @Test
    public void testSet() {
        LinkedList list = new LinkedList(10);
        list.append(20);
        list.append(30);

        list.set(2, 25);

        LinkedList.Node nodeAtIndex2 = list.get(2);
        assertEquals(25, nodeAtIndex2.value);
        assertEquals(list.length, 3);
    }

    @Test
    public void testSet_OutOfBounds() {
        LinkedList list = new LinkedList(10);

        Exception exception = assertThrows(IndexOutOfBoundsException.class, () -> {
            list.set(2, 20);
        });

        assertEquals("2 is out of bounds. Cannot set Value.", exception.getMessage());
    }
}
